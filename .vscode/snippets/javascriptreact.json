{
  "react-component-function": {
    "scope": "javascriptreact",
    "prefix": "r-component-function",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import classnames from 'classnames'",
      "",
      "const ${1:ComponentName} = ({ element, children, className, ...rest }) => {",
      "  const Element = element",
      "",
      "  return (",
      "    <Element {...rest} className={classnames('${2:ln-c-component-name}', className)}>",
      "      {children}",
      "    </Element>",
      "  )",
      "}",
      "",
      "${1:ComponentName}.propTypes = {",
      "  element: PropTypes.oneOfType([",
      "    PropTypes.string,",
      "    PropTypes.func,",
      "    PropTypes.object,",
      "  ]),",
      "  children: PropTypes.node,",
      "  className: PropTypes.string,",
      "}",
      "",
      "${1:ComponentName}.defaultProps = {",
      "  element: '${3:div}',",
      "  children: undefined,",
      "  className: undefined,",
      "}",
      "",
      "${1:ComponentName}.displayName = '${1:ComponentName}'",
      "",
      "export default ${1:ComponentName}",
      ""
    ],
    "description": "Stateless React component"
  },
  "react-component-class": {
    "scope": "javascriptreact",
    "prefix": "r-component-class",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      "import classnames from 'classnames'",
      "",
      "class ${1:ComponentName} extends PureComponent {",
      "  constructor(props) {",
      "    super(props)",
      "",
      "    this.state = {",
      "      clicked: false,",
      "    }",
      "",
      "    this.handleClick = this.handleClick.bind(this)",
      "  }",
      "",
      "  handleClick() {",
      "    this.setState({",
      "      clicked: true,",
      "    })",
      "  }",
      "",
      "  render() {",
      "    const { element, children, className, ...rest } = this.props",
      "    const Element = element",
      "",
      "    return (",
      "      <Element",
      "        {...rest}",
      "        className={classnames('${2:ln-c-component-name}', className)}",
      "        onClick={this.handleClick}",
      "      >",
      "        {children}",
      "      </Element>",
      "    )",
      "  }",
      "}",
      "",
      "${1:ComponentName}.propTypes = {",
      "  element: PropTypes.oneOfType([",
      "    PropTypes.string,",
      "    PropTypes.func,",
      "    PropTypes.object,",
      "  ]),",
      "  children: PropTypes.node,",
      "  className: PropTypes.string,",
      "}",
      "",
      "${1:ComponentName}.defaultProps = {",
      "  element: '${3:div}',",
      "  children: undefined,",
      "  className: undefined,",
      "}",
      "",
      "${1:ComponentName}.displayName = '${1:ComponentName}'",
      "",
      "export default ${1:ComponentName}",
      ""
    ],
    "description": "Stateful React pure component"
  },
  "jest": {
    "scope": "javascriptreact",
    "prefix": "r-jest",
    "body": [
      "import React from 'react'",
      "import { shallow } from 'enzyme'",
      "",
      "import { ${1:ComponentName} } from '..'",
      "",
      "const setup = (testProps = {}) => {",
      "  const props = {",
      "    ${3:...defaultProps,}",
      "    ...testProps,",
      "  }",
      "",
      "  const wrapper = shallow(<${1:ComponentName} {...props} />)",
      "",
      "  return {",
      "    props,",
      "    wrapper,",
      "  }",
      "}",
      "",
      "describe('${1:ComponentName}', () => {",
      "  it('${4:should do something}', () => {",
      "    const { wrapper } = setup()",
      "    expect(true).toBe(true)",
      "  })",
      "",
      "  it('renders matching snapshot', () => {",
      "    const { wrapper } = setup()",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ],
    "description": "Jest component test"
  }
}
